# Generated by Django 3.2.19 on 2023-10-12 00:07

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('dpauth', '0002_auto_20191205_0936'),
    ]

    operations = [
        migrations.CreateModel(
            name='Ban',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expires', models.DateField(default=datetime.date(9999, 12, 31), help_text='Date until which this ban lasts', verbose_name='Until')),
                ('comment', models.TextField(help_text='Reason and other notes for the ban, only mods can read this')),
                ('reason', models.CharField(blank=True, help_text='Reason for the ban shown to the user, may be left empty', max_length=255)),
                ('reaction', models.CharField(choices=[('normal', "Normal ban: disconnect and tell client they're banned"), ('neterror', 'Shadow ban: disconnect with a bogus network error'), ('garbage', 'Shadow ban: send garbage responses in the login process'), ('hang', 'Shadow ban: hang the login process forever with no response'), ('timer', 'Shadow ban: sever connection after a random time elapses')], default='normal', help_text='Shadow bans may help slow down ban evaders, not applied to IPs by default', max_length=16)),
                ('reaction_includes_ipbans', models.BooleanField(default=False, help_text='NOT RECOMMENDED! False positives will confuse the heck out of legitimate users', verbose_name='Apply shadow bans to IPs')),
            ],
        ),
        migrations.CreateModel(
            name='BanUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ban', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dpauth.ban')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User',
            },
        ),
        migrations.CreateModel(
            name='BanSystemIdentifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='UUID, shown in ClientInfo server logs under "s"', max_length=64, validators=[django.core.validators.RegexValidator('^[0-9a-fA-F]{32}$', message='Must be 32 characters of 0123456789abcdef')])),
                ('ban', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dpauth.ban')),
            ],
            options={
                'verbose_name': 'System Identifier',
            },
        ),
        migrations.CreateModel(
            name='BanIpRange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_ip', models.CharField(help_text='IPv4 or IPv6 address', max_length=64, verbose_name='Start of IP Range')),
                ('to_ip', models.CharField(blank=True, help_text='Leave empty to affect only a single address', max_length=64, verbose_name='End of IP Range (inclusive)')),
                ('excluded', models.BooleanField(default=False, verbose_name='Exclusion')),
                ('ban', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dpauth.ban')),
            ],
            options={
                'verbose_name': 'IP Range',
            },
        ),
    ]
